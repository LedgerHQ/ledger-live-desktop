name: "Tests | Bundle App"
on:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

jobs:
  cancel-previous:
    name: "cancel previous workflow"
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        run: curl -i -L -X GET 'https://github-actions-live.ledger.tools/api/cancel-previous-run?runId=${{ github.run_id }}&owner=LedgerHQ&repo=ledger-live-desktop&branch=${{ github.event.pull_request.head.ref }}&headSha=${{ github.event.pull_request.head.sha }}'

  check-if-fork:
    needs: [cancel-previous]
    runs-on: ubuntu-20.04
    outputs:
      forked: ${{ steps.forked.outputs.forked }}
    steps:
      - name: echo
        run: |
          echo ${{github.event.pull_request.head.repo.full_name }}
          echo ${{ github.repository }}

      - name: check if we are on a forked repo
        id: forked
        run: echo "::set-output name=forked::$(${{github.event.pull_request.head.repo.full_name != github.repository }})"

  bundle-macos:
    name: "[macOS] Build"
    runs-on: [ledger-live, macos]
    needs: cancel-previous
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        with:
          node-version: 14.x
      - name: install yarn
        run: npm i -g yarn
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: install dependencies
        run: JOBS=max yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: version
        with:
          path: ${{ github.workspace }}
      - name: set beta name
        uses: ledgerhq/actions/packages/change-product-name@main
        with:
          path: ${{ github.workspace }}
      - name: make local version pr
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}
        run: yarn version --new-version="$VERSION"
      - name: make local version push
        if: github.event_name == 'push'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.sha }}
        run: yarn version --new-version="$VERSION"
      - name: build the app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: yarn build-ci
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: post-version
        with:
          path: ${{ github.workspace }}
      - name: upload macOS app
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.post-version.outputs.version }}-mac.dmg
          path: dist/${{ steps.post-version.outputs.name }}-${{ steps.post-version.outputs.version }}-mac.dmg

  clean-macos-runner:
    runs-on: [ledger-live, macos]
    needs: [bundle-macos]
    steps:
      - name: Clean working directory
        run: |
          cd $RUNNER_WORKSPACE
          cd ..
          rm -r *

  start-runner:
    name: "[Runner] start ec2 instance"
    needs: check-if-fork
    if: ${{ !needs.check-if-fork.outputs.forked && github.actor != 'dependabot[bot]' }}
    uses: ledgerhq/actions/.github/workflows/start-linux-runner.yml@main
    with:
      instance-type: c5.4xlarge
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  stop-runner:
    name: "[Runner] stop ec2 instance"
    if: ${{ always() }}
    needs: [start-runner, bundle-linux-hosted]
    uses: ledgerhq/actions/.github/workflows/stop-linux-runner.yml@main
    with:
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  bundle-linux-hosted:
    name: "[Linux] Build"
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: prepare runner
        run: |
          sudo growpart /dev/nvme0n1 1
          sudo resize2fs /dev/nvme0n1p1
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        if: always()
        with:
          node-version: 14.x
      - name: install yarn
        if: always()
        run: npm install --global yarn
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: kill dpkg
        run: sudo killall -w dpkg || echo OK
      - name: install and switch to GCC 5.4
        run: ./tools/g++-5.4/install.sh
      - name: install dependencies
        run: JOBS=max yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: version
        with:
          path: ${{ github.workspace }}
      - name: set beta name
        uses: ledgerhq/actions/packages/change-product-name@main
        with:
          path: ${{ github.workspace }}
      - name: make local version pr
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}
        run: yarn version --new-version="$VERSION"
      - name: make local version push
        if: github.event_name == 'push'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.sha }}
        run: yarn version --new-version="$VERSION"
      - name: build the app
        run: yarn build-ci
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: post-version
        with:
          path: ${{ github.workspace }}
      - name: upload linux app
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage
          path: dist/${{ steps.post-version.outputs.name }}-${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage

  bundle-linux-guest:
    name: "[Linux] Build"
    needs: [check-if-fork]
    runs-on: ubuntu-20.04
    if: ${{needs.check-if-fork.outputs.forked || github.actor == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        if: always()
        with:
          node-version: 14.x
          cache: yarn
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: install linux dependencies
        run: sudo apt-get update && sudo apt-get install libudev-dev libusb-1.0-0-dev
      - name: install and switch to GCC 5.4
        run: ./tools/g++-5.4/install.sh
      - name: install dependencies
        run: JOBS=max yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: version
        with:
          path: ${{ github.workspace }}
      - name: set beta name
        uses: ledgerhq/actions/packages/change-product-name@main
        with:
          path: ${{ github.workspace }}
      - name: make local version pr
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}
        run: yarn version --new-version="$VERSION"
      - name: make local version push
        if: github.event_name == 'push'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.sha }}
        run: yarn version --new-version="$VERSION"
      - name: build the app
        run: yarn build-ci
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: post-version
        with:
          path: ${{ github.workspace }}
      - name: upload linux app
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage
          path: dist/${{ steps.post-version.outputs.name }}-${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage

  bundle-windows:
    name: "[Windows] Build"
    runs-on: windows-latest
    needs: cancel-previous
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        with:
          node-version: 14.x
      - uses: actions/setup-python@v1
        with:
          python-version: "2.7.x"
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: install dependencies
        env:
          JOBS: max
        run: yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/packages/get-package-infos@main
        id: version
        with:
          path: ${{ github.workspace }}
      - name: set beta name
        uses: ledgerhq/actions/packages/change-product-name@main
        with:
          path: ${{ github.workspace }}
      - name: make local version pr
        id: postversion1
        if: github.event_name == 'pull_request'
        run: echo "::set-output name=content::${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}"
      - name: make local version push
        id: postversion2
        if: github.event_name == 'push'
        run: echo "::set-output name=content::${{ steps.version.outputs.clean }}-sha.${{ github.sha }}"
      - name: build the app
        run: yarn build-ci
      - name: upload windows
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.postversion1.outputs.content }}${{ steps.postversion2.outputs.content }}-win-x64.exe
          path: dist/${{ steps.version.outputs.name }}-${{ steps.version.outputs.version }}-win-x64.exe
