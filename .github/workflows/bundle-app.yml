name: "[Tests] Bundle App"
on:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

jobs:
  cancel-previous:
    name: "cancel previous workflow"
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        run: curl -i -L -X GET 'https://github-actions-live.ledger.tools/api/cancel-previous-run?runId=${{ github.run_id }}&owner=LedgerHQ&repo=ledger-live-desktop&branch=${{ github.event.pull_request.head.ref }}&headSha=${{ github.event.pull_request.head.sha }}'

  bundle-macos:
    name: "[macOS Build]"
    runs-on: macos-latest
    needs: cancel-previous
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        with:
          node-version: 14.x
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: install dependencies
        run: JOBS=max yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/get-package-infos@v2.0.0
        id: version
      - name: set beta name
        uses: ./.github/actions/change-product-name
      - name: make local version pr
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}
        run: yarn version --new-version="$VERSION"
      - name: make local version push
        if: github.event_name == 'push'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.sha }}
        run: yarn version --new-version="$VERSION"
      - name: build the app
        run: yarn build-ci
      - uses: ledgerhq/actions/get-package-infos@v2.0.0
        id: post-version
      - name: upload macOS app
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.post-version.outputs.version }}-mac.dmg
          path: dist/${{ steps.post-version.outputs.name }}-${{ steps.post-version.outputs.version }}-mac.dmg

  start-runner:
    name: "start ec2 instance"
    needs: cancel-previous
    uses: LedgerHQ/actions/.github/workflows/start-linux-runner.yml@master
    with:
      instance-type: c5.4xlarge
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  stop-runner:
    name: "stop ec2 instance"
    if: ${{ always() }}
    needs: [start-runner, bundle-linux]
    uses: LedgerHQ/actions/.github/workflows/stop-linux-runner.yml@master
    with:
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  bundle-linux:
    name: "[Linux Build]"
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: prepare runner
        run: |
          sudo growpart /dev/nvme0n1 1
          sudo resize2fs /dev/nvme0n1p1
      - uses: ledgerhq/actions/check-member@v2.0.0
        with:
          username: ${{ github.actor }}
          ban: ledgerlive
        if: github.event_name == 'pull_request'
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        if: always()
        with:
          node-version: 14.x
      - name: install yarn
        if: always()
        run: npm install --global yarn
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: kill dpkg
        run: sudo killall -w dpkg || echo OK
      - name: install and switch to GCC 5.4
        run: ./tools/g++-5.4/install.sh
      - name: install dependencies
        run: JOBS=max yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/get-package-infos@v2.0.0
        id: version
      - name: set beta name
        uses: ./.github/actions/change-product-name
      - name: make local version pr
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}
        run: yarn version --new-version="$VERSION"
      - name: make local version push
        if: github.event_name == 'push'
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ github.sha }}
        run: yarn version --new-version="$VERSION"
      - name: build the app
        run: yarn build-ci
      - uses: ledgerhq/actions/get-package-infos@v2.0.0
        id: post-version
      - name: upload linux app
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage
          path: dist/${{ steps.post-version.outputs.name }}-${{ steps.post-version.outputs.version }}-linux-x86_64.AppImage

  bundle-windows:
    name: "[Windows Build]"
    runs-on: windows-latest
    needs: cancel-previous
    steps:
      - uses: ledgerhq/actions/check-member@v2.0.0
        with:
          username: ${{ github.actor }}
          ban: ledgerlive
        if: github.event_name == 'pull_request'
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          persist-credentials: false
      - uses: actions/setup-node@main
        with:
          node-version: 14.x
      - uses: actions/setup-python@v1
        with:
          python-version: "2.7.x"
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - name: install dependencies
        env:
          JOBS: max
        run: yarn --frozen-lockfile --network-timeout 100000
      - uses: ledgerhq/actions/get-package-infos@v2.0.0
        id: version
      - name: set beta name
        uses: ./.github/actions/change-product-name
      - name: make local version pr
        id: postversion1
        if: github.event_name == 'pull_request'
        run: echo "::set-output name=content::${{ steps.version.outputs.clean }}-sha.${{ github.event.pull_request.head.sha }}"
      - name: make local version push
        id: postversion2
        if: github.event_name == 'push'
        run: echo "::set-output name=content::${{ steps.version.outputs.clean }}-sha.${{ github.sha }}"
      - name: build the app
        run: yarn build-ci
      - name: upload windows
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.postversion1.outputs.content }}${{ steps.postversion2.outputs.content }}-win-x64.exe
          path: dist/${{ steps.version.outputs.name }}-${{ steps.version.outputs.version }}-win-x64.exe
