name: "Hackathon | Tests Slack Reports"
on:
  workflow_dispatch:
    inputs:
      runId:
        description: run id
        required: true

  workflow_run:
    workflows: ["Tests | Test Suite"]
    types:
      - "completed"

jobs:
  log:
    name: "Check previous github object"
    runs-on: ubuntu-20.04
    steps:
      - name: log github object
        env:
          GITHUB: ${{ toJSON(github) }}
        run: |
          echo $GITHUB
  comment-on-pr:
    name: "Slack report"
    runs-on: ubuntu-20.04
    steps:
      - name: download artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.inputs && github.event.inputs.runId || github.event.workflow_run.id }},
            });

            // Filter Artifacts

            const reportArtifacts = artifacts.data.artifacts.filter(artifact => {
              return artifact.name == "tests-reports";
            })[0];

            const playwrightArtifacts = artifacts.data.artifacts.filter(artifact => {
              return (
                artifact.name == "playwright-results-windows-latest" ||
                artifact.name === "playwright-results-linux"
              );
            });

            const imagesArtifacts = artifacts.data.artifacts.filter(artifact => {
              return artifact.name.includes("images-");
            });

            // Download Artifacts

            const downloadReport = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: reportArtifacts.id,
              archive_format: "zip",
            });

            fs.writeFileSync(
              "${{github.workspace}}/" + reportArtifacts.name + ".zip",
              Buffer.from(downloadReport.data)
            );

            const pPWArtifacts = await Promise.all(
              playwrightArtifacts.map(artifact => {
                return github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: "zip",
                });
              })
            );

            pPWArtifacts.forEach((artifact, i) => {
              fs.writeFileSync(
                "${{github.workspace}}/" + playwrightArtifacts[i].name + ".zip",
                Buffer.from(artifact.data)
              );
            });

            const pImagesArtifacts = await Promise.all(
              imagesArtifacts.map(image => {
                return github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: image.id,
                  archive_format: "zip",
                });
              })
            );

            pImagesArtifacts.forEach((artifact, i) => {
              fs.writeFileSync(
                "${{github.workspace}}/" + imagesArtifacts[i].name + ".zip",
                Buffer.from(artifact.data)
              );
            });

      - name: unzip files
        run: |
          unzip tests-reports.zip || true
          unzip playwright-results-windows-latest.zip -d pw-windows || true
          unzip playwright-results-linux.zip -d pw-linux || true
          unzip images-linux.json.zip || true
          unzip images-windows-latest.json.zip || true
          rm tests-reports.zip playwright-results-windows-latest.zip playwright-results-linux.zip images-linux.json.zip images-windows-latest.json.zip
      - name: parse images
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");

            const files = ["images-linux", "images-windows-latest"];

            let result = {};
            for (const file of files) {
              try {
                const raw = JSON.parse(fs.readFileSync("${{github.workspace}}/" + file + ".json"));
                const key = file.replace("images-", "").replace("-latest", "").trim()
                result[key] = raw;
              } catch (err) {
                console.log(err);
              }
            }

            fs.writeFileSync(`./images.json`, JSON.stringify(result, null, 2));
      - name: prepare slack message
        uses: actions/github-script@v6
        id: prepare-slack-message
        with:
          script: |
            const fs = require('fs');
            const imagesObject = fs.readFileSync("./images.json");
            const parsed = JSON.parse(imagesObject);

            console.log(JSON.stringify(parsed, null, 2));

            let windows = parsed.windows.map(e => ({
              {
                "type": "divider"
              },
              {
                "type": "image",
                "title": {
                  "type": "plain_text",
                  "text": e.actual.name,
                  "emoji": true
                },
                "image_url": e.actual.link,
                "alt_text": "marg"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": e.diff.name
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View",
                    "emoji": true
                  },
                  "value": "click_me_123",
                  "url": e.diff.link,
                  "action_id": "button-action"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": e.expected.name
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "Click Me",
                    "emoji": true
                  },
                  "value": "click_me_123",
                  "url": e.expected.link,
                  "action_id": "button-action"
                }
              }
            })

            let blocks = [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":alert: Screenshots have been updated!\n\n Pull Request: ${{ github.event.head_commit.message }}\n Owner: *${{ github.actor }}*."
                }
              },
              windows
            ]

            const result = { blocks };
            console.log(result);

            fs.writeFileSync("./payload-slack-content.json", JSON.stringify(result));
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: "C01J7M2CUTZ"
          # payload: ${{ fromJSON(steps.prepare-slack-message.outputs.result) }}
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
